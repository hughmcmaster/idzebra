 <chapter id="quick-start">
  <title>Quick Start </title>

  <para>
   <!-- ### ulink to GILS profile: what's the URL? -->
   In this section, we will test the system by indexing a small set of
   sample GILS records that are included with the &zebra; distribution,
   running a &zebra; server against the newly created database, and
   searching the indexes with a client that connects to that server.
  </para>
  <para>
   Go to the <literal>examples/gils</literal> subdirectory of the
   distribution archive.  The 48 test records are located in the sub
   directory <literal>records</literal>. To index these, type:
   <screen>
    zebraidx update records
   </screen>
  </para>

  <para>
   In this command, the word <literal>update</literal> is followed
   by the name of a directory: <literal>zebraidx</literal> updates all
   files in the hierarchy rooted at that directory.
  </para>

  <para>
   If your indexing command was successful, you are now ready to
   fire up a server. To start a server on port 2100, type:

   <screen>
    zebrasrv @:2100
   </screen>

  </para>

  <para>
   The &zebra; index that you have just created has a single database
   named <literal>Default</literal>.
   The database contains records structured according to
   the GILS profile, and the server will
   return records in &acro.usmarc;, &acro.grs1;, or &acro.sutrs; format depending
   on what the client asks for.
  </para>

  <para>
   To test the server, you can use any &acro.z3950; client.
   For instance, you can use the demo command-line client that comes
   with &yaz;:
  </para>
  <para>
   <screen>
    yaz-client localhost:2100
   </screen>
  </para>

  <para>
   When the client has connected, you can type:
  </para>

  <para>
   <screen>
    Z&#62; find surficial
    Z&#62; show 1
   </screen>
  </para>

  <para>
   The default retrieval syntax for the client is &acro.usmarc;, and the
   default element set is <literal>F</literal> (``full record''). To
   try other formats and element sets for the same record, try:
  </para>
  <para>
   <screen>
    Z&#62;format sutrs
    Z&#62;show 1
    Z&#62;format grs-1
    Z&#62;show 1
    Z&#62;format xml
    Z&#62;show 1
    Z&#62;elements B
    Z&#62;show 1
   </screen>
  </para>

  <note>
   <para>You may notice that more fields are returned when your
    client requests &acro.sutrs;, &acro.grs1; or &acro.xml; records.
    This is normal - not all of the GILS data elements have mappings in
    the &acro.usmarc; record format.
   </para>
  </note>
  <para>
   If you've made it this far, you know that your installation is
   working, but there's a certain amount of voodoo going on - for
   example, the mysterious incantations in the
   <literal>zebra.cfg</literal> file.  In order to help us understand
   these fully, the next chapter will work through a series of
   increasingly complex example configurations.
  </para>

 </chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "idzebra.xml"
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
