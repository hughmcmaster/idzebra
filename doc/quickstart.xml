<chapter id="quick-start">
 <!-- $Id: quickstart.xml,v 1.3 2002-10-08 08:09:43 mike Exp $ -->
 <title>Quick Start </title>
 
 <para>
  FIXME - Start with the new improved example scripts that run 
  without any configuration file changes!
 </para>

 <para>
  In this section, we will test the system by indexing a small set of sample
  GILS records that are included with the software distribution. Go to the
  <literal>test/gils</literal> subdirectory of the distribution archive.
  There you will find a configuration
  file named <literal>zebra.cfg</literal> with the following contents:
  
  <screen>
   # Where the schema files, attribute files, etc are located.
   profilePath: .:../../tab:../../../yaz/tab:/usr/local/share/yaz/tab:/usr/share/yaz/tab

   # Files that describe the attribute sets supported.
   attset: bib1.att
   attset: gils.att
   attset: explain.att

   recordtype: grs.sgml
   isam: c
  </screen>
 </para>
 
 <para>
  If necessary, edit the file and set <literal>profilePath</literal> to the path of the
  YAZ profile tables (sub directory <literal>tab</literal> of the YAZ
  distribution archive).
 </para>
 
 <para>
  The 48 test records are located in the sub directory
  <literal>records</literal>. To index these, type:
  
  <screen>
   zebraidx update records
  </screen>
 </para>
 
 <para>
  In the command above, the word <literal>update</literal> followed
  by a directory root updates all files below that directory node.
 </para>
 
 <para>
  If your indexing command was successful, you are now ready to
  fire up a server. To start a server on port 2100, type:
  
  <screen>
   zebrasrv tcp:@:2100
  </screen>
  
 </para>

 <para>
  The Zebra index that you have just created has a single database
  named <literal>Default</literal>.
  The database contains records structured according to
  the GILS profile, and the server will
  return records in either either USMARC, GRS-1, or SUTRS depending
  on what your client asks for.
 </para>
 
 <para>
  To test the server, you can use any Z39.50 client.
  For instance, you can use the demo client that comes with YAZ:
 </para>
 <para>
  <screen>
   yaz-client tcp:localhost:2100
  </screen>
 </para>
 
 <para>
  When the client has connected, you can type:
 </para>
 
 <para>
  <screen>
   Z&#62; find surficial
   Z&#62; show 1
  </screen>
 </para>
 
 <para>
  The default retrieval syntax for the client is USMARC. To try other
  formats for the same record, try:
 </para>
 <para>
  <screen>
   Z&#62;format sutrs
   Z&#62;show 1
   Z&#62;format grs-1
   Z&#62;show 1
   Z&#62;format xml
   Z&#62;show 1
   Z&#62;elements B
   Z&#62;show 1
  </screen>
 </para>
 
 <note>
  <para>You may notice that more fields are returned when your
   client requests SUTRS or GRS-1 records. When retrieving GILS records,
   this is normal - not all of the GILS data elements have mappings in
   the USMARC record format.
  </para>
 </note>
 <para>
  If you've made it this far, you know that your installation is
  working, but there's a certain amount of voodoo going on - for
  example, the mysterious incantations in the
  <literal>zebra.cfg</literal> file.  In order to help us understand
  these fully, the next chapter will work through a series of
  increasingly complex example configurations.
 </para>
 
</chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: "zebra.xml"
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
